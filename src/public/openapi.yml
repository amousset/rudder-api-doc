openapi: 3.0.3
info:
  title: Rudder API
  version: "12"
  description: >-
    # Introduction


    Rudder exposes a REST API, enabling the user to interact with Rudder without using the webapp, for example in scripts or cronjobs.


    ## Versioning

    Each time the API is extended with new features (new functions, new parameters, new responses, ...), it will be assigned a new version number. This will allow you
    to keep your existing scripts (based on previous behavior). Versions will always be integers (no 2.1 or 3.3, just 2, 3, 4, ...) or "latest".

    You can change the version of the API used by setting it either within the url or in a header:

    * the URL: each URL is prefixed by its version id, like `/api/version/function`.


        # Version 10
        curl -X GET -H "X-API-Token: yourToken" https://rudder.example.com/rudder/api/10/rules
        # Latest
        curl -X GET -H "X-API-Token: yourToken" https://rudder.example.com/rudder/api/latest/rules
        # Wrong (not an integer) => 404 not found
        curl -X GET -H "X-API-Token: yourToken" https://rudder.example.com/rudder/api/3.14/rules


    * the HTTP headers. You can add the **_X-API-Version_** header to your request. The value needs to be an integer or "latest".


        # Version 10
        curl -X GET -H "X-API-Token: yourToken" -H "X-API-Version: 10" https://rudder.example.com/rudder/api/rules
        # Wrong => Error response indicating which versions are available
        curl -X GET -H "X-API-Token: yourToken" -H "X-API-Version: 3.14" https://rudder.example.com/rudder/api/rules


    In the future, we may declare some versions as deprecated, in order to remove them in a later version of Rudder, but we will never remove any versions without warning, or without a safe
    period of time to allow migration from previous versions.


    <h4>Existing versions</h4>
    <table>
      <thead>
        <tr>
          <th style="width: 20%">Version</th>
          <th style="width: 20%">Rudder versions it appeared in</th>
          <th style="width: 70%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="code">1</td>
          <td class="code">Never released (for internal use only)</td>
          <td>Experimental version</td>
        </tr>
        <tr>
          <td class="code">2 to 10 (deprecated)</td>
          <td class="code">4.3 and before</td>
          <td>These versions provided the core set of API features for rules, directives, nodes global parameters, change requests and compliance, rudder settings and system API</td>
        </tr>
        <tr>
          <td class="code">11</td>
          <td class="code">5.0</td>
          <td>New system API (replacing old localhost v1 api): status, maintenance operations and server behavior</td>
        </tr>
        <tr>
          <td class="code">12</td>
          <td class="code">6.0</td>
          <td>Node key management</td>
        </tr>

      </tbody>
    </table>


    ## Response format

    All responses from the API are in the JSON format.


        {
          "action": The name of the called function,
          "id": The ID of the element you want, if relevant,
          "result": The result of your action: success or error,
          "data": Only present if this is a success and depends on the function, it's usually a JSON object,
          "errorDetails": Only present if this is an error, it contains the error message
        }



    * __Success__ responses are sent with the 200 HTTP (Success) code

    * __Error__ responses are sent with a HTTP error code (mostly 5xx...)


    ## HTTP method

    Rudder's REST API is based on the usage of [HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html). We use them to indicate what action will be done by the request. Currently, we use four of them:


    * **GET**: search or retrieve information (get Rule Details, get a Group, ...)

    * **PUT**: add new objects (Create a Directive, Clone a Rule, ...)

    * **DELETE**: remove objects (Delete a Node, Delete a Parameter, ...)

    * **POST**: update existing objects (Update a Directive, Reload a Group, ...)


    ## Parameters

    To use Rudder API, you may need to pass data attributes to the API. Most of them depends on the called function and will be described below, in the corresponding function's section. Some are common to almost all functions and are described here:

    ### Passing parameters

    Parameters to the API can be sent:


    * As part of the URL

    * As request arguments

    * Directly in JSON format


    #### As part of the URL

    Parameters in URLs are used to indicate which data you want to interact with. The function will not work if this data is missing.


        # Get the Rule of ID "id"
        curl -H "X-API-Token: yourToken" http://rudder.example.com/rudder/api/latest/rules/id


    #### Request parameters

    In most cases, data will be sent using request parameters. for all data you want to change, you need to pass one parameter.

    Parameters follow the following schema:


        key=value


    You can pass parameters by two means:

    * As query parameters: At the end of your url, put a **?** then your first parameter and then a **&** before next parameters


        # Update the Rule 'id' with a new name, disabled, and setting it one directive 
        curl -X POST -H "X-API-Token: yourToken"  https://rudder.example.com/rudder/api/rules/latest/{id}?"displayName=my new name"&"enabled=false"&"directives=aDirectiveId"


    * As request data: You can pass those parameters in the request data, they won't figure in the URL, making it lighter to read, You can pass a file that contains data.


        # Update the Rule 'id' with a new name, disabled, and setting it one directive (in file directive-info.json)
        curl -X POST -H "X-API-Token: yourToken"
        https://rudder.example.com/rudder/api/rules/latest/{id} -d "displayName=my new name" -d "enabled=false" -d @directive-info.json


    #### Directly in JSON format

    Instead of passing parameters one by one, you can instead supply a JSON object containing all you want to do. You'll also have to set the *Content-Type* header to **application/json** (without it the JSON content would be ignored).

    The supplied file must contain a valid JSON: strings need quotes, booleans and integers
    don't, ...

    The (human readable) format is:


        {
          "key1": "value1",
          "key2": false,
          "key3": 42
        }


    Here is an example with inlined data:



        # Update the Rule 'id' with a new name, disabled, and setting it one directive
        curl -X POST -H "X-API-Token: yourToken" -H  "Content-Type: application/json"
          https://rudder.example.com/rudder/api/rules/latest/{id} 
          -d '{ "displayName": "new name", "enabled": false, "directives": "directiveId"}'



    You can also pass a supply the JSON in a file:


        # Update the Rule 'id' with a new name, disabled, and setting it one directive 
        curl -X POST -H "X-API-Token: yourToken" -H "Content-Type: application/json" https://rudder.example.com/rudder/api/rules/latest/{id} -d @jsonParam


    Note that some parameters cannot be passed in a JSON (general parameters, it will be precised when necessary), and you will need to pass them a URL parameters if you want them to be taken into account (you can't mix JSON and request parameters)


        # Update the Rule 'id' with a new name, disabled, and setting it one directive with reason message "Reason used" 
        curl -X POST -H "X-API-Token: yourToken" -H "Content-Type: application/json" "https://rudder.example.com/rudder/api/rules/latest/{id}?reason=Reason used" -d @jsonParam -d "reason=Reason ignored"


    ### General parameters

    Some parameters are available for almost all API functions. They will be described in this section.
    They must be part of the request and can't be submit in a JSON form.

    #### Available for all requests

    <table>
      <thead>
        <tr>
          <th style="width: 30%">Field</th>
          <th style="width: 10%">Type</th>
          <th style="width: 70%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="code">prettify <span class="label label-optional">Optional</span></td>
          <td>Boolean</td>
          <td>
            Determine if the answer should be prettified (human friendly) or not. We recommend using this for debugging purposes, but not for general script usage as this does add some unnecessary load on the server side.
            <p class="default-value">Default value: <code>false</code></p>
          </td>
        </tr>
      </tbody>
    </table>


    #### Available for modification requests (PUT/POST/DELETE)

    <table>
      <thead>
        <tr>
          <th style="width: 30%">Field</th>
          <th style="width: 10%">Type</th>
          <th style="width: 70%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="code">reason <span class="label label-optional">See description </span></td>
          <td>String</td>
          <td>
            Set a message to explain the change. If you set the reason messages to be mandatory in the web interface, failing to supply this value will lead to an error.
            <p class="default-value">Default value: <code>an empty string</code></p>
          </td>
        </tr>
        <tr>
          <td class="code">changeRequestName <span class="label label-optional">Optional</span></td>
          <td>String</td>
          <td>
            Set the change request name, is used only if workflows are enabled. The default value depends on the function called
            <p class="default-value">Default value: <code>A default String for each function</code></p>
          </td>
        </tr>
        <tr>
          <td class="code">changeRequestDescription <span class="label label-optional">Optional </span></td>
          <td>String</td>
          <td>
            Set the change request description, is used only if workflows are enabled.
            <p class="default-value">Default value: <code>an empty string</code></p>
          </td>
        </tr>
      </tbody>
    </table>

  x-logo:
    url: "assets/rudder.png"
  contact:
    email: dev@rudder.io
    name: Rudder developers
    url: "https://www.rudder.io"
  license:
    name: "CC-BY-SA 2.0"
    url: "https://spdx.org/licenses/CC-BY-SA-2.0.html"
servers:
  - url: "https://rudder.example.local/rudder/api/12/"
    description: "Rudder server"
externalDocs:
  description: Learn more about Rudder.
  url: "https://docs.rudder.io"
components:
  securitySchemes:
    "API tokens":
      description: >-
        Authenticating against the API is mandatory for every request, as sensitive information like inventories or configuration rules may get exposed.
        It is done using a dedicated API Account, than can be created in the web interface on the 'API Accounts' page located inside the Administration part.


        ![API Tokens settings](assets/APISettings.png "API Tokens settings")


        API Accounts are not linked to standard user accounts, and currently give full administrative privileges: they must be secured adequately.
        Once you have created an API account, you get a token that will be needed to authenticate every request. This token is the API equivalent of a password, and must
        be secured just like a password would be.


        On any call to the API, you will need to add a **_X-API-Token_** header to your request to authenticate:


            curl -X GET -H "X-API-Token: yourToken" https://rudder.example.com/rudder/api/latest/rules


        If you perform any action (creation, update, deletion) using the API, the event log generated will record the API account as the user.
      type: apiKey
      in: header
      name: X-API-Token
security:
  # Apply the same auth everywhere
  - "API tokens": []
tags:
  - name: Compliance
    description: Access compliance data
  - name: Rules
    description: Rules management
  - name: Directives
    description: Directives management
  - name: Techniques
    description: Techniques management
  - name: Groups
    description: Groups management
  - name: Nodes
    description: Nodes management
  - name: Inventories
    description: Inventory processing service
  - name: Parameters
    description: Global parameters
  - name: Change requests
    description: Manage change requests
  - name: Data sources
    description: Data sources plugin configuration. Requires that the `datasources` plugin is installed on the server.
  - name: Settings
    description: Server configuration
  - name: System
    description: Internal components and administration
paths:
  "/changeRequests/{id}/accept":
    $ref: paths/change-requests/accept.yml
  #  "/changeRequests/{id}":
  #    $ref: paths/change-requests/id.yml
  #  "/api/changeRequests":
  #    $ref: paths/change-requests/all.yml
  "/compliance":
    $ref: paths/compliance/global.yml
  "/compliance/rules":
    $ref: paths/compliance/rules.yml
  "/compliance/rules/{ruleId}":
    $ref: paths/compliance/rule.yml
  "/compliance/nodes":
    $ref: paths/compliance/nodes.yml
  "/compliance/nodes/{nodeId}":
    $ref: paths/compliance/node.yml
  "/system/status":
    $ref: paths/system/status.yml
  "/system/info":
    $ref: paths/system/info.yml
  "/system/reload":
    $ref: paths/system/reload.yml
  "/reload/techniques":
    $ref: paths/system/reload-techniques.yml
  "/reload/groups":
    $ref: paths/system/reload-groups.yml
  "/regenerate/policies":
    $ref: paths/system/regenerate-policies.yml
  "/system/update/policies":
    $ref: paths/system/update-policies.yml
  "/system/archives/{archiveKind}":
    $ref: paths/system/archives.yml
  "/settings":
    $ref: paths/settings/list.yml
  "/settings/{settingId}":
    $ref: paths/settings/setting.yml
  "/parameters":
    $ref: paths/parameters/parameters.yml
  "/parameters/{parameterId}":
    $ref: paths/parameters/parameters-id.yml
  "/inventories/info":
    $ref: paths/inventories/info.yml
  "/inventories/upload":
    $ref: paths/inventories/upload.yml
  "/inventories/watcher/start":
    $ref: paths/inventories/start.yml
  "/inventories/watcher/stop":
    $ref: paths/inventories/stop.yml
  "/inventories/watcher/restart":
    $ref: paths/inventories/restart.yml
  "/datasources":
    $ref: paths/datasources/all.yml
  "/datasources/{datasourceId}":
    $ref: paths/datasources/id.yml
  "/datasources/reload":
    $ref: paths/datasources/reload.yml
  "/datasources/reload/{datasourceId}":
    $ref: paths/datasources/reload-id.yml
  "/nodes/{nodeId}/fetchData":
    $ref: paths/datasources/reload-node.yml
  "/nodes/{nodeId}/fetchData/{datasourceId}":
    $ref: paths/datasources/reload-node-id.yml
  "/nodes":
    $ref: paths/nodes/all.yml
  "/nodes/{nodeId}":
    $ref: paths/nodes/id.yml
  "/nodes/pending/{nodeId}":
    $ref: paths/nodes/pending-id.yml
  "/nodes/applyPolicy":
    $ref: paths/nodes/apply-policy.yml
  "/nodes/{nodeId}/applyPolicy":
    $ref: paths/nodes/apply-policy-id.yml
  "/techniques":
    $ref: paths/techniques/all.yml
  "/techniques/{techniqueName}/directives":
    $ref: paths/techniques/name.yml
  "/techniques/{techniqueName}/{techniqueVersion}/directives":
    $ref: paths/techniques/name-version.yml
  "/groups":
    $ref: paths/groups/all.yml
  "/groups/{groupId}":
    $ref: paths/groups/id.yml
  "/groups/{groupId}/reload":
    $ref: paths/groups/reload.yml
  "/groups/categories/{categoryId}":
    $ref: paths/groups/category-id.yml
  "/groups/categories":
    $ref: paths/groups/categories.yml
  "/groups/tree":
    $ref: paths/groups/tree.yml
